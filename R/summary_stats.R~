###
### summary stat calculator  There are separate functions for different dataTypes
###


#' calculate summary stats
#' @param gin is a gtypes object with genetic data
#' @param meta is a dataframe with metadata
#' @param dataType is a character that defines the type of genetic
#'     data
#' @description this function calls different summary stats functions
#'     based on the value of dataType (possibilities include
#'     "sequence", "snp", "microsatellite")
#' @return vector of summary statistics
#' @export
summary_stats=function(gin,meta,dataType)
{
    if (tolower(dataType)=="sequence")
        summary_stats_seq(gin,meta)
    else if (tolower(dataType)=="snp")
        summary_stats_snp(gin,meta)
    else if (tolower(dataType)=="microsatellite")
        summary_stats_microsatellite(gin,meta)
    else stop("incorrect data type specified in summary_stats()")
}

#' calculate summary stats for sequence data (like mtDNA or cpDNA)
#' @param gin is a gtypes object with sequence data
#' @param meta is a dataframe with metadata
#' @description calculates a lot of population genetic summary statistics
summary_stats_seq=function(gin,meta)
{
    ###nucleotide diversity among and within pops
    overallDiv=c(mean(nucleotideDiversity(gin)))
    names(overallDiv)="overallDiversity"
    withinPopDiv=sapply(unique(getStrata(gin)),function(s)
    {
        res=mean(nucleotideDiversity(gin[,,s],simplify=T))
        res
    })
    names(withinPopDiv)=paste0(names(withinPopDiv),".within")
    nd=nucleotideDivergence(gin)
    withinPi = nd$within$mean
    names(withinPi)=nd$stratum
    amongPi=nd$between$mean
    names(amongPi)=paste0(nd$between$strata.1,".",nd$between$strata.2)

    ##haplotype diversity
    overallHapDiv=pegas::hap.div(getSequences(gin))
    names(overallHapDiv)="overallHapDiv"
    withinPopHapDiv=sapply(unique(getStrata(gin)),function(s)
    {
        ret = 0
        if (!is.na(withinPopDiv[paste0(s,".within")]))
            if (withinPopDiv[paste0(s,".within")]!=0)
                if (table(getStrata(gin))[s]>1)
                    ret =  pegas::hap.div(getSequences(labelHaplotypes(gin[,,s])))
        ret
    })
    names(withinPopHapDiv)=paste0(names(withinPopDiv),".hap")
    print("this far")
    overallStruct=overallTest(nosingles(gin),nrep=0)$result[3,1]
        print("this far2")
    pwStruct=sapply(pairwiseTest(nosingles(gin),nrep=0,quiet=T),function(x){y=x$result[3,1];names(y)=paste(names(x$strata.freq),collapse=".");y})
            print("this far3")
    names(overallStruct) = "overallPhiST"
    names(pwStruct)=paste(names(pwStruct),".PhiST")
    c( overallDiv,  withinPopDiv, withinPi,  amongPi, overallHapDiv,
      withinPopHapDiv, overallStruct, pwStruct)
}


###takes a strataG 'gtypes' object and returns one with all strata with a single
###individual removed
nosingles = function(gin)
{
    st = table(getStrata(gin))
    if (min(st)<2)
        gin[,,-which(st<2)]
    else
        gin
}
